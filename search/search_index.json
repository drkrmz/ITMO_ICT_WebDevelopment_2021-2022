{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0424\u0415\u0414\u0415\u0420\u0410\u041b\u042c\u041d\u041e\u0415 \u0413\u041e\u0421\u0423\u0414\u0410\u0420\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0412\u042b\u0421\u0428\u0415\u0413\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u00ab\u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439\u00bb \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u00ab45.04.04 \u0418\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0433\u0443\u043c\u0430\u043d\u0438\u0442\u0430\u0440\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435\u00bb \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u0414\u0430\u0440\u044c\u044f \u041a\u0430\u0440\u043c\u0430\u0437\u044c, \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33421 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. C\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"#-","text":"\u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u00ab\u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439\u00bb \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u00ab45.04.04 \u0418\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0433\u0443\u043c\u0430\u043d\u0438\u0442\u0430\u0440\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435\u00bb","title":"\u0424\u0415\u0414\u0415\u0420\u0410\u041b\u042c\u041d\u041e\u0415 \u0413\u041e\u0421\u0423\u0414\u0410\u0420\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0412\u042b\u0421\u0428\u0415\u0413\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e"},{"location":"#-_1","text":"","title":"\u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb"},{"location":"#33421","text":"","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430: \u0414\u0430\u0440\u044c\u044f \u041a\u0430\u0440\u043c\u0430\u0437\u044c, \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33421"},{"location":"#_1","text":"C\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, 2022","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418."},{"location":"conclusion/","text":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u0445\u043e\u0434\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0437\u0430\u043b\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c, \u043a\u043d\u0438\u0433\u0430\u0445 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445. \u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0442\u0430\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Django REST Framework, \u043a\u0430\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"conclusion/#_1","text":"\u0412 \u0445\u043e\u0434\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0437\u0430\u043b\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c, \u043a\u043d\u0438\u0433\u0430\u0445 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445. \u0411\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0442\u0430\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Django REST Framework, \u043a\u0430\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"docker/","text":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b Docker \u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430: FROM python:3 RUN apt-get update && apt-get upgrade -y && apt-get autoremove && apt-get autoclean RUN mkdir /library COPY . /library WORKDIR /library RUN pip install --upgrade pip RUN pip install django RUN pip install djangorestframework RUN pip install django-cors-headers RUN pip install djoser RUN pip install djangorestframework-filters ENTRYPOINT [\"python\", \"manage.py\"] CMD [\"runserver\", \"0.0.0.0:8000\"] FROM node:lts-alpine RUN mkdir /app COPY . /app COPY package*.json /app WORKDIR /app RUN npm install RUN npm install @vue/cli@3.7.0 -g CMD [\"npm\", \"run\", \"serve\"] \u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b docker-compose \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434\u0430: services: django: build: ./library_project ports: - 8080:8000 postgres: image: postgres:13.3 environment: POSTGRES_DB: \"postgres\" POSTGRES_USER: \"postgres\" POSTGRES_PASSWORD: \"postgres\" volumes: - ./dbs/postgres-data:/var/lib/postgresql ports: - \"5432:5432\" vue: build: ./project depends_on: - django ports: - 8082:8080 \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: docker-compose build docker-compose up","title":"\u0413\u043b\u0430\u0432\u0430 1. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"docker/#_1","text":"\u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b Docker \u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430: FROM python:3 RUN apt-get update && apt-get upgrade -y && apt-get autoremove && apt-get autoclean RUN mkdir /library COPY . /library WORKDIR /library RUN pip install --upgrade pip RUN pip install django RUN pip install djangorestframework RUN pip install django-cors-headers RUN pip install djoser RUN pip install djangorestframework-filters ENTRYPOINT [\"python\", \"manage.py\"] CMD [\"runserver\", \"0.0.0.0:8000\"] FROM node:lts-alpine RUN mkdir /app COPY . /app COPY package*.json /app WORKDIR /app RUN npm install RUN npm install @vue/cli@3.7.0 -g CMD [\"npm\", \"run\", \"serve\"] \u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0444\u0430\u0439\u043b docker-compose \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434\u0430: services: django: build: ./library_project ports: - 8080:8000 postgres: image: postgres:13.3 environment: POSTGRES_DB: \"postgres\" POSTGRES_USER: \"postgres\" POSTGRES_PASSWORD: \"postgres\" volumes: - ./dbs/postgres-data:/var/lib/postgresql ports: - \"5432:5432\" vue: build: ./project depends_on: - django ports: - 8082:8080 \u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: docker-compose build docker-compose up","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"introduction/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430 \u043f\u043e \u0442\u0435\u043c\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0417\u0430\u0434\u0430\u0447\u0438: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Django REST Framework, \u043a\u0430\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435; \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e vue.js. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0437\u0430\u043b\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c, \u043a\u043d\u0438\u0433\u0430\u0445 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445. API \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043c\u043e\u0436\u043d\u043e: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445: readers/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433\u0430\u0445: books/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435: library/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043b\u0430\u0445: rooms/list/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0451\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e: readers/int:pk/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u0443 \u043a\u043d\u0438\u0433\u0443 \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u0439 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0451: books/int:pk/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d \u0437\u0430\u043b \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0451\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e: rooms/int:pk/ \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0451: library/int:pk/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f: readers/create/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u043d\u0438\u0433\u0443: books/create/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b: rooms/create/","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"introduction/#_1","text":"\u0426\u0435\u043b\u044c: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434 \u0434\u043b\u044f \u0441\u0430\u0439\u0442\u0430 \u043f\u043e \u0442\u0435\u043c\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0417\u0430\u0434\u0430\u0447\u0438: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Django REST Framework, \u043a\u0430\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435; \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e vue.js.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"introduction/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0437\u0430\u043b\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c, \u043a\u043d\u0438\u0433\u0430\u0445 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"introduction/#api","text":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043c\u043e\u0436\u043d\u043e: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445: readers/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433\u0430\u0445: books/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435: library/list/ \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043b\u0430\u0445: rooms/list/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0451\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e: readers/int:pk/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u0443 \u043a\u043d\u0438\u0433\u0443 \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u0439 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0451: books/int:pk/ \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d \u0437\u0430\u043b \u043f\u043e id, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0451\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e: rooms/int:pk/ \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0451: library/int:pk/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f: readers/create/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u043d\u0438\u0433\u0443: books/create/ \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b: rooms/create/","title":"API"},{"location":"get/tests/","text":"Get \u0442\u0435\u0441\u0442\u044b class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(name='\u041c\u0430\u043b\u044b\u0439 1', capacity=45) Room.objects.create(name='\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2', capacity=70) def test_create_room(self): url = reverse('library:room', args=[1]) data = {\"id\": 1, \"name\": '\u041c\u0430\u043b\u044b\u0439 1', \"capacity\": 45, \"books\": []} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_room_capacity(self): url = reverse('library:room', args=[2]) data = {\"capacity\": 70} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json()['capacity'], data['capacity']) def test_room_name(self): url = reverse('library:room', args=[2]) data = {\"name\": '\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json()['name'], data['name'])","title":"Get tests"},{"location":"get/tests/#get","text":"class RoomModelTest(TestCase): @classmethod def setUpTestData(cls): Room.objects.create(name='\u041c\u0430\u043b\u044b\u0439 1', capacity=45) Room.objects.create(name='\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2', capacity=70) def test_create_room(self): url = reverse('library:room', args=[1]) data = {\"id\": 1, \"name\": '\u041c\u0430\u043b\u044b\u0439 1', \"capacity\": 45, \"books\": []} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) def test_room_capacity(self): url = reverse('library:room', args=[2]) data = {\"capacity\": 70} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json()['capacity'], data['capacity']) def test_room_name(self): url = reverse('library:room', args=[2]) data = {\"name\": '\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json()['name'], data['name'])","title":"Get \u0442\u0435\u0441\u0442\u044b"},{"location":"model/tests/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c class AuthorModelTest(TestCase): @classmethod def setUpTestData(cls): Author.objects.create(name='\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0430\u0432\u0442\u043e\u0440') def test_name_label(self): author = Author.objects.get(id=1) field_label = author._meta.get_field('name').verbose_name self.assertEquals(field_label, '\u0424\u0418\u041e') def test_name_max_length(self): author = Author.objects.get(id=1) max_length = author._meta.get_field('name').max_length self.assertEquals(max_length, 70) def test_object_name_is_name(self): author = Author.objects.get(id=1) expected_object_name = '%s' % author.name self.assertEquals(expected_object_name, str(author))","title":"Model tests"},{"location":"model/tests/#_1","text":"class AuthorModelTest(TestCase): @classmethod def setUpTestData(cls): Author.objects.create(name='\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0430\u0432\u0442\u043e\u0440') def test_name_label(self): author = Author.objects.get(id=1) field_label = author._meta.get_field('name').verbose_name self.assertEquals(field_label, '\u0424\u0418\u041e') def test_name_max_length(self): author = Author.objects.get(id=1) max_length = author._meta.get_field('name').max_length self.assertEquals(max_length, 70) def test_object_name_is_name(self): author = Author.objects.get(id=1) expected_object_name = '%s' % author.name self.assertEquals(expected_object_name, str(author))","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"patch/tests/","text":"Patch \u0442\u0435\u0441\u0442\u044b class UpdateTest(APITestCase): @classmethod def setUpTestData(cls): Room.objects.create(name='\u041c\u0430\u043b\u044b\u0439 1', capacity=45) Room.objects.create(name='\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2', capacity=70) def test_update_capacity(self): url = reverse('library:room', args=[1]) data = {\"capacity\": 30} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['name'] = '\u041c\u0430\u043b\u044b\u0439 1' data['id'] = 1 data['books'] = [] self.assertEqual(response.data, data) def test_update_name(self): url = reverse('library:room', args=[1]) data = {\"name\": '\u041d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b'} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['capacity'] = 45 data['id'] = 1 data['books'] = [] self.assertEqual(response.data, data) def test_update_name_and_capacity(self): url = reverse('library:room', args=[2]) data = {\"name\": '\u041d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b', 'capacity': 50} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['id'] = 2 data['books'] = [] self.assertEqual(response.data, data)","title":"Patch tests"},{"location":"patch/tests/#patch","text":"class UpdateTest(APITestCase): @classmethod def setUpTestData(cls): Room.objects.create(name='\u041c\u0430\u043b\u044b\u0439 1', capacity=45) Room.objects.create(name='\u0411\u043e\u043b\u044c\u0448\u043e\u0439 2', capacity=70) def test_update_capacity(self): url = reverse('library:room', args=[1]) data = {\"capacity\": 30} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['name'] = '\u041c\u0430\u043b\u044b\u0439 1' data['id'] = 1 data['books'] = [] self.assertEqual(response.data, data) def test_update_name(self): url = reverse('library:room', args=[1]) data = {\"name\": '\u041d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b'} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['capacity'] = 45 data['id'] = 1 data['books'] = [] self.assertEqual(response.data, data) def test_update_name_and_capacity(self): url = reverse('library:room', args=[2]) data = {\"name\": '\u041d\u043e\u0432\u044b\u0439 \u0437\u0430\u043b', 'capacity': 50} response = self.client.patch(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) data['id'] = 2 data['books'] = [] self.assertEqual(response.data, data)","title":"Patch \u0442\u0435\u0441\u0442\u044b"},{"location":"post/tests/","text":"Post \u0442\u0435\u0441\u0442\u044b class CreateTest(TestCase): def test_create_author(self): url = reverse('library:author-create') data = {\"name\": \"\u041b\u0435\u0432 \u0422\u043e\u043b\u0441\u0442\u043e\u0439\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) def test_create_publisher(self): url = reverse('library:publisher-create') data = {\"name\": \"Cool Publisher\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) def test_create_reader(self): url = reverse('library:reader-create') data = {\"name\": \"Reader 1\",\"ticket\": \"2039420\", \"passport\": \"495820394\", \"birth_date\": '2001-05-03', \"address\": \"Nice Street\", \"phone_number\": \"89129039032\", \"education\": \"\u0432\", \"degree\": False, \"registration_date\": '2022-06-06'} response = self.client.post(url, data, format='json') data[\"id\"] = 1 data['room'] = None data['books'] = [] self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"Post tests"},{"location":"post/tests/#post","text":"class CreateTest(TestCase): def test_create_author(self): url = reverse('library:author-create') data = {\"name\": \"\u041b\u0435\u0432 \u0422\u043e\u043b\u0441\u0442\u043e\u0439\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) def test_create_publisher(self): url = reverse('library:publisher-create') data = {\"name\": \"Cool Publisher\"} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) def test_create_reader(self): url = reverse('library:reader-create') data = {\"name\": \"Reader 1\",\"ticket\": \"2039420\", \"passport\": \"495820394\", \"birth_date\": '2001-05-03', \"address\": \"Nice Street\", \"phone_number\": \"89129039032\", \"education\": \"\u0432\", \"degree\": False, \"registration_date\": '2022-06-06'} response = self.client.post(url, data, format='json') data[\"id\"] = 1 data['room'] = None data['books'] = [] self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"Post \u0442\u0435\u0441\u0442\u044b"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/2.2.1/","text":"2.2.1 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f settings.py 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 2","title":"2.2.1 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/2.2.1/#221","text":"settings.py 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 2","title":"2.2.1 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/2.2.2/","text":"2.2.2 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f views.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) class BookOrder(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['year'] pagination_class = CustomPagination urls.py re_path('^books/order/$', BookOrder.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"2.2.2 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/2.2.2/#222","text":"views.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, 'count': self.page.paginator.count, 'results': data }) class BookOrder(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['year'] pagination_class = CustomPagination urls.py re_path('^books/order/$', BookOrder.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"2.2.2 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/pagination/","text":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 Pagination.vue Pagination.vue <template> <div> <v-pagination v-model=\"currentPage\" :length=\"totalPages\" white color=\"black\" @input=\"changePage(currentPage)\" ></v-pagination> </div> </template> <script> export default { name: 'Pagination', props: ['total', 'item', 'ordered', 'check', 'searching'], data () { return { search: this.searching, order: this.ordered, checked: this.check, currentPage: 1 } }, computed: { totalPages () { return this.item !== 2 ? Math.ceil(this.total / 2) : Math.ceil(this.total / this.item) } }, methods: { changePage (pageNumber) { this.currentPage = pageNumber this.$emit('page-changing', pageNumber) } } } </script> \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0442\u0430\u043a: template <Pagination :total=\"total\" :item=\"books.length\" :ordered=\"order\" :searching=\"search\" :check=\"checked\" @page-changing=\"loadBook\"/> script import Pagination from '../components/Pagination' export default { return { ... page: 1, total: 0, ... } }, components: { Pagination },","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/pagination/#_1","text":"\u0414\u043b\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 Pagination.vue Pagination.vue <template> <div> <v-pagination v-model=\"currentPage\" :length=\"totalPages\" white color=\"black\" @input=\"changePage(currentPage)\" ></v-pagination> </div> </template> <script> export default { name: 'Pagination', props: ['total', 'item', 'ordered', 'check', 'searching'], data () { return { search: this.searching, order: this.ordered, checked: this.check, currentPage: 1 } }, computed: { totalPages () { return this.item !== 2 ? Math.ceil(this.total / 2) : Math.ceil(this.total / this.item) } }, methods: { changePage (pageNumber) { this.currentPage = pageNumber this.$emit('page-changing', pageNumber) } } } </script> \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0442\u0430\u043a: template <Pagination :total=\"total\" :item=\"books.length\" :ordered=\"order\" :searching=\"search\" :check=\"checked\" @page-changing=\"loadBook\"/> script import Pagination from '../components/Pagination' export default { return { ... page: 1, total: 0, ... } }, components: { Pagination },","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"%D0%9F%D0%BE%D0%B8%D1%81%D0%BA/search/","text":"\u041f\u043e\u0438\u0441\u043a template <v-list-item> <v-list-item-content> <v-text-field v-model=\"searchTerm\" placeholder=\"Name of the book\" @input=\"searchBooks(page, searchTerm)\"></v-text-field> </v-list-item-content> </v-list-item> scripts searchBooks (pageNumber, e) { if (sessionStorage.getItem('auth_token')) { this.findUser() } this.search = e $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&page=' + pageNumber + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.books = response.results this.total = response.count this.createRange() }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u041f\u043e\u0438\u0441\u043a"},{"location":"%D0%9F%D0%BE%D0%B8%D1%81%D0%BA/search/#_1","text":"template <v-list-item> <v-list-item-content> <v-text-field v-model=\"searchTerm\" placeholder=\"Name of the book\" @input=\"searchBooks(page, searchTerm)\"></v-text-field> </v-list-item-content> </v-list-item> scripts searchBooks (pageNumber, e) { if (sessionStorage.getItem('auth_token')) { this.findUser() } this.search = e $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&page=' + pageNumber + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.books = response.results this.total = response.count this.createRange() }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u041f\u043e\u0438\u0441\u043a"},{"location":"%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/2.4.1/","text":"2.4.1 \u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 models.py @receiver(post_save, sender=Author) def handle_new_author(sender, **kwargs): if kwargs['created']: print('New author was added') \u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 models.py @receiver(pre_save, sender=Room) def handle_room_change(sender, instance, update_fields=['capacity'], **kwargs): old = sender.objects.filter(name=instance)[0].capacity new = instance.capacity print('Old: {}\\nNew: {}'.format(old, new)) \u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c models.py @receiver(pre_delete, sender=Author) def handle_author_delete(sender, **kwargs): file = open('deleted_authors.txt', 'a') file.write(str(kwargs['instance']) + ' was deleted') file.close()","title":"2.4 \u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/2.4.1/#241","text":"","title":"2.4.1 \u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/2.4.1/#_1","text":"models.py @receiver(post_save, sender=Author) def handle_new_author(sender, **kwargs): if kwargs['created']: print('New author was added')","title":"\u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/2.4.1/#_2","text":"models.py @receiver(pre_save, sender=Room) def handle_room_change(sender, instance, update_fields=['capacity'], **kwargs): old = sender.objects.filter(name=instance)[0].capacity new = instance.capacity print('Old: {}\\nNew: {}'.format(old, new))","title":"\u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/2.4.1/#_3","text":"models.py @receiver(pre_delete, sender=Author) def handle_author_delete(sender, **kwargs): file = open('deleted_authors.txt', 'a') file.write(str(kwargs['instance']) + ' was deleted') file.close()","title":"\u0421\u0438\u0433\u043d\u0430\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c"},{"location":"%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0/sort/","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 template <v-btn @click=\"loadBook(page, 'name')\" text > <span class=\"mr-2\">Sort books</span> </v-btn> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0/sort/#_1","text":"template <v-btn @click=\"loadBook(page, 'name')\" text > <span class=\"mr-2\">Sort books</span> </v-btn> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"%D0%A4%D0%B0%D0%B9%D0%BB%D1%8B/2.3.1/","text":"2.3.1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 models.py class Cover(models.Model): name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) type = models.CharField(verbose_name='\u0422\u0438\u043f', blank=True, null=True, max_length=100) validate_file = FileValidator(max_size=1024 * 1000, content_types=('image/jpeg', 'image/png')) file = models.FileField(verbose_name='\u0424\u0430\u0439\u043b', upload_to='media/', validators=[validate_file], null=True) def __str__(self): return self.name class Book(models.Model): name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.ForeignKey('Author', on_delete=CASCADE, verbose_name='\u0410\u0432\u0442\u043e\u0440', blank=True, null=True) publisher = models.ForeignKey('Publisher', on_delete=CASCADE, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e', blank=True, null=True) year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') section = models.ForeignKey('Section', on_delete=CASCADE, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b', blank=True, null=True) code = models.CharField(max_length=20, verbose_name='\u0428\u0438\u0444\u0440') new = models.CharField(max_length=20, verbose_name='Test', blank=True, null=True) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c', blank=True, null=True) cover = models.ForeignKey('Cover', on_delete=CASCADE, verbose_name='\u041e\u0431\u043b\u043e\u0436\u043a\u0430', blank=True, null=True) def __str__(self): return self.name serializers.py class CoverSerializer(serializers.ModelSerializer): class Meta: model = Cover fields = ['file'] views.py class CoverUpload(ViewSet): serializer_class = CoverSerializer def create(self, request): uploaded_file = request.FILES.get('file') Cover.objects.create(name=uploaded_file.name, size=uploaded_file.size, file=uploaded_file) return Response() urls.py router = routers.DefaultRouter() router.register('upload', CoverUpload, basename=\"upload\") urlpatterns = [ ... path('', include(router.urls)) ] C\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 models.py class Cover(models.Model): name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) type = models.CharField(verbose_name='\u0422\u0438\u043f', blank=True, null=True, max_length=100) validate_file = FileValidator(max_size=1024 * 1000, content_types=('image/jpeg', 'image/png')) file = models.FileField(verbose_name='\u0424\u0430\u0439\u043b', upload_to='media/', validators=[validate_file], null=True) def __str__(self): return self.name class Book(models.Model): name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.ForeignKey('Author', on_delete=CASCADE, verbose_name='\u0410\u0432\u0442\u043e\u0440', blank=True, null=True) publisher = models.ForeignKey('Publisher', on_delete=CASCADE, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e', blank=True, null=True) year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') section = models.ForeignKey('Section', on_delete=CASCADE, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b', blank=True, null=True) code = models.CharField(max_length=20, verbose_name='\u0428\u0438\u0444\u0440') new = models.CharField(max_length=20, verbose_name='Test', blank=True, null=True) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c', blank=True, null=True) cover = models.ForeignKey('Cover', on_delete=CASCADE, verbose_name='\u041e\u0431\u043b\u043e\u0436\u043a\u0430', blank=True, null=True) def __str__(self): return self.name validators.py import magic from django.utils.deconstruct import deconstructible from django.template.defaultfilters import filesizeformat from django.core.exceptions import ValidationError @deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, content_types=()): self.max_size = max_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = { 'content_type': content_type } raise ValidationError(self.error_messages['content_type'], 'content_type', params) return data def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.content_types == other.content_types ) serializers.py class CoverSerializer(serializers.ModelSerializer): class Meta: model = Cover fields = ['file'] views.py class MultipleCoversView(ModelViewSet): serializer_class = CoverSerializer queryset = Cover.objects.all() def create(self, request): uploaded_files = request.FILES.getlist('file') for uploaded_file in uploaded_files: new_cover = Cover(name=uploaded_file.name, size=uploaded_file.size, file=uploaded_file, type=uploaded_file.content_type) new_cover.full_clean() new_cover.save() return Response() urls.py router = routers.DefaultRouter() router.register('upload_multiple', MultipleCoversView, basename=\"upload_multiple\") urlpatterns = [ ... path('', include(router.urls)) ]","title":"2.3 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"%D0%A4%D0%B0%D0%B9%D0%BB%D1%8B/2.3.1/#231","text":"","title":"2.3.1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"%D0%A4%D0%B0%D0%B9%D0%BB%D1%8B/2.3.1/#_1","text":"models.py class Cover(models.Model): name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) type = models.CharField(verbose_name='\u0422\u0438\u043f', blank=True, null=True, max_length=100) validate_file = FileValidator(max_size=1024 * 1000, content_types=('image/jpeg', 'image/png')) file = models.FileField(verbose_name='\u0424\u0430\u0439\u043b', upload_to='media/', validators=[validate_file], null=True) def __str__(self): return self.name class Book(models.Model): name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.ForeignKey('Author', on_delete=CASCADE, verbose_name='\u0410\u0432\u0442\u043e\u0440', blank=True, null=True) publisher = models.ForeignKey('Publisher', on_delete=CASCADE, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e', blank=True, null=True) year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') section = models.ForeignKey('Section', on_delete=CASCADE, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b', blank=True, null=True) code = models.CharField(max_length=20, verbose_name='\u0428\u0438\u0444\u0440') new = models.CharField(max_length=20, verbose_name='Test', blank=True, null=True) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c', blank=True, null=True) cover = models.ForeignKey('Cover', on_delete=CASCADE, verbose_name='\u041e\u0431\u043b\u043e\u0436\u043a\u0430', blank=True, null=True) def __str__(self): return self.name serializers.py class CoverSerializer(serializers.ModelSerializer): class Meta: model = Cover fields = ['file'] views.py class CoverUpload(ViewSet): serializer_class = CoverSerializer def create(self, request): uploaded_file = request.FILES.get('file') Cover.objects.create(name=uploaded_file.name, size=uploaded_file.size, file=uploaded_file) return Response() urls.py router = routers.DefaultRouter() router.register('upload', CoverUpload, basename=\"upload\") urlpatterns = [ ... path('', include(router.urls)) ]","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"%D0%A4%D0%B0%D0%B9%D0%BB%D1%8B/2.3.1/#c","text":"models.py class Cover(models.Model): name = models.CharField(max_length=100, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435', null=True) size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440', null=True) type = models.CharField(verbose_name='\u0422\u0438\u043f', blank=True, null=True, max_length=100) validate_file = FileValidator(max_size=1024 * 1000, content_types=('image/jpeg', 'image/png')) file = models.FileField(verbose_name='\u0424\u0430\u0439\u043b', upload_to='media/', validators=[validate_file], null=True) def __str__(self): return self.name class Book(models.Model): name = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435') author = models.ForeignKey('Author', on_delete=CASCADE, verbose_name='\u0410\u0432\u0442\u043e\u0440', blank=True, null=True) publisher = models.ForeignKey('Publisher', on_delete=CASCADE, verbose_name='\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e', blank=True, null=True) year = models.IntegerField(verbose_name='\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f') section = models.ForeignKey('Section', on_delete=CASCADE, verbose_name='\u0420\u0430\u0437\u0434\u0435\u043b', blank=True, null=True) code = models.CharField(max_length=20, verbose_name='\u0428\u0438\u0444\u0440') new = models.CharField(max_length=20, verbose_name='Test', blank=True, null=True) date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c', blank=True, null=True) cover = models.ForeignKey('Cover', on_delete=CASCADE, verbose_name='\u041e\u0431\u043b\u043e\u0436\u043a\u0430', blank=True, null=True) def __str__(self): return self.name validators.py import magic from django.utils.deconstruct import deconstructible from django.template.defaultfilters import filesizeformat from django.core.exceptions import ValidationError @deconstructible class FileValidator(object): error_messages = { 'max_size': (\"Ensure this file size is not greater than %(max_size)s.\" \" Your file size is %(size)s.\"), 'content_type': \"Files of type %(content_type)s are not supported.\", } def __init__(self, max_size=None, content_types=()): self.max_size = max_size self.content_types = content_types def __call__(self, data): if self.max_size is not None and data.size > self.max_size: params = { 'max_size': filesizeformat(self.max_size), 'size': filesizeformat(data.size), } raise ValidationError(self.error_messages['max_size'], 'max_size', params) if self.content_types: content_type = magic.from_buffer(data.read(), mime=True) data.seek(0) if content_type not in self.content_types: params = { 'content_type': content_type } raise ValidationError(self.error_messages['content_type'], 'content_type', params) return data def __eq__(self, other): return ( isinstance(other, FileValidator) and self.max_size == other.max_size and self.content_types == other.content_types ) serializers.py class CoverSerializer(serializers.ModelSerializer): class Meta: model = Cover fields = ['file'] views.py class MultipleCoversView(ModelViewSet): serializer_class = CoverSerializer queryset = Cover.objects.all() def create(self, request): uploaded_files = request.FILES.getlist('file') for uploaded_file in uploaded_files: new_cover = Cover(name=uploaded_file.name, size=uploaded_file.size, file=uploaded_file, type=uploaded_file.content_type) new_cover.full_clean() new_cover.save() return Response() urls.py router = routers.DefaultRouter() router.register('upload_multiple', MultipleCoversView, basename=\"upload_multiple\") urlpatterns = [ ... path('', include(router.urls)) ]","title":"C\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.1/","text":"2.1.1 \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0424\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 views.py class BookYearList(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): year = self.request.query_params.get('year') return Book.objects.filter(year=year) urls.py re_path('^books/filter/$', BookYearList.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0424\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 views.py class BookNameYear(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() name = self.request.query_params.get('name') year = self.request.query_params.get('year') queryset = queryset.filter(year=year) queryset = queryset.filter(name=name) return queryset urls.py re_path('^books/filters/$', BookNameYear.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0424\u0438\u043b\u044c\u0442\u0440, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d views.py class BookNameYearUser(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() name = self.request.query_params.get('name') year = self.request.query_params.get('year') if self.request.user.is_authenticated: queryset = queryset.filter(year=year) queryset = queryset.filter(name=name) return queryset urls.py re_path('^books/filters/user/$', BookNameYearUser.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"2.1.1 \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.1/#211","text":"","title":"2.1.1 \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.1/#url-","text":"views.py class BookYearList(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): year = self.request.query_params.get('year') return Book.objects.filter(year=year) urls.py re_path('^books/filter/$', BookYearList.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0424\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.1/#2-url-","text":"views.py class BookNameYear(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() name = self.request.query_params.get('name') year = self.request.query_params.get('year') queryset = queryset.filter(year=year) queryset = queryset.filter(name=name) return queryset urls.py re_path('^books/filters/$', BookNameYear.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0424\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.1/#2-url-_1","text":"views.py class BookNameYearUser(generics.ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() name = self.request.query_params.get('name') year = self.request.query_params.get('year') if self.request.user.is_authenticated: queryset = queryset.filter(year=year) queryset = queryset.filter(name=name) return queryset urls.py re_path('^books/filters/user/$', BookNameYearUser.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0424\u0438\u043b\u044c\u0442\u0440, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.2/","text":"2.1.2 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435 views.py class BookOrder(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['year'] pagination_class = CustomPagination urls.py re_path('^books/order/$', BookOrder.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u041f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b views.py class BookSearch(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.SearchFilter] search_fields = ['^name', 'author__name'] urls.py re_path('^books/search/$', BookSearch.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b: C\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 views.py class YearFilter(auto_filters.FilterSet): min_year = auto_filters.NumberFilter(field_name=\"year\", lookup_expr='gte') max_year = auto_filters.NumberFilter(field_name=\"year\", lookup_expr='lte') class Meta: model = Book fields = ['min_year', 'max_year'] class BookDate(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [DjangoFilterBackend] filterset_class = YearFilter urls.py re_path('^books/filters/dj/$', BookDate.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430:","title":"2.1.2 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.2/#212","text":"","title":"2.1.2 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.2/#_1","text":"views.py class BookOrder(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.OrderingFilter] ordering_fields = ['year'] pagination_class = CustomPagination urls.py re_path('^books/order/$', BookOrder.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.2/#_2","text":"views.py class BookSearch(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [filters.SearchFilter] search_fields = ['^name', 'author__name'] urls.py re_path('^books/search/$', BookSearch.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b:","title":"\u041f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/2.1.2/#c-","text":"views.py class YearFilter(auto_filters.FilterSet): min_year = auto_filters.NumberFilter(field_name=\"year\", lookup_expr='gte') max_year = auto_filters.NumberFilter(field_name=\"year\", lookup_expr='lte') class Meta: model = Book fields = ['min_year', 'max_year'] class BookDate(generics.ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = [DjangoFilterBackend] filterset_class = YearFilter urls.py re_path('^books/filters/dj/$', BookDate.as_view()) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430:","title":"C\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/checkbox/","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u043e\u043c template <v-card flat> <v-card-text> <v-container fluid> <v-row class=\"mt-2\"> <v-col cols=\"12\" sm=\"4\" md=\"4\"> <b>Choose Author</b> <div v-for=\"author in authors\" :key=\"author.id\"> <v-checkbox v-model=\"checked\" color=\"black\" :label=\"`${author.name}`\" :value=\"`${author.name}`\" hide-details @change=\"loadBook(page, '')\"></v-checkbox> </div> </v-col> </v-row> </v-container> </v-card-text> </v-card> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u043e\u043c"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/checkbox/#_1","text":"template <v-card flat> <v-card-text> <v-container fluid> <v-row class=\"mt-2\"> <v-col cols=\"12\" sm=\"4\" md=\"4\"> <b>Choose Author</b> <div v-for=\"author in authors\" :key=\"author.id\"> <v-checkbox v-model=\"checked\" color=\"black\" :label=\"`${author.name}`\" :value=\"`${author.name}`\" hide-details @change=\"loadBook(page, '')\"></v-checkbox> </div> </v-col> </v-row> </v-container> </v-card-text> </v-card> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u043e\u043c"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/range/","text":"\u0424\u0438\u043b\u044c\u0442\u0440 \u0441 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c template <v-card flat color=\"transparent\" > <v-card-text> <v-row> <v-col class=\"px-4\"> <b>Choose Year</b> <v-range-slider @change=\"loadBook(page, '')\" v-model=\"range\" :max=\"max\" :min=\"min\" color=\"black\" track-color=\"gray\" hide-details class=\"align-center\" > <template v-slot:prepend> <v-text-field :value=\"range[0]\" class=\"mt-0 pt-0\" hide-details single-line type=\"number\" style=\"width: 60px\" @change=\"$set(range, 0)\" ></v-text-field> </template> <template v-slot:append> <v-text-field :value=\"range[1]\" class=\"mt-0 pt-0\" hide-details single-line type=\"number\" style=\"width: 60px\" @change=\"$set(range, 1)\" ></v-text-field> </template> </v-range-slider> </v-col> </v-row> </v-card-text> </v-card> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) } createRange () { $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&author=' + this.checked + '&ordering=year&page=1', type: 'GET', success: (response) => { this.min = response.results[0].year this.range = [Math.max(this.min, this.range[0]), Math.min(this.max, this.range[1])] }, error: (response) => { alert('Something went wrong, please, try again') } }) $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&author=' + this.checked + '&ordering=-year&page=1', type: 'GET', success: (response) => { this.max = response.results[0].year this.range = [Math.max(this.min, this.range[0]), Math.min(this.max, this.range[1])] }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d"},{"location":"%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/range/#_1","text":"template <v-card flat color=\"transparent\" > <v-card-text> <v-row> <v-col class=\"px-4\"> <b>Choose Year</b> <v-range-slider @change=\"loadBook(page, '')\" v-model=\"range\" :max=\"max\" :min=\"min\" color=\"black\" track-color=\"gray\" hide-details class=\"align-center\" > <template v-slot:prepend> <v-text-field :value=\"range[0]\" class=\"mt-0 pt-0\" hide-details single-line type=\"number\" style=\"width: 60px\" @change=\"$set(range, 0)\" ></v-text-field> </template> <template v-slot:append> <v-text-field :value=\"range[1]\" class=\"mt-0 pt-0\" hide-details single-line type=\"number\" style=\"width: 60px\" @change=\"$set(range, 1)\" ></v-text-field> </template> </v-range-slider> </v-col> </v-row> </v-card-text> </v-card> script loadBook (pageNumber, order) { if (sessionStorage.getItem('auth_token')) { this.findUser() } if (order !== undefined) { this.order = order } $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?ordering=' + this.order + '&page=' + pageNumber + '&search=' + this.search + '&author=' + this.checked + '&min_year=' + this.range[0] + '&max_year=' + this.range[1], type: 'GET', success: (response) => { this.createRange() this.books = response.results this.total = response.count }, error: (response) => { alert('Something went wrong, please, try again') } }) } createRange () { $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&author=' + this.checked + '&ordering=year&page=1', type: 'GET', success: (response) => { this.min = response.results[0].year this.range = [Math.max(this.min, this.range[0]), Math.min(this.max, this.range[1])] }, error: (response) => { alert('Something went wrong, please, try again') } }) $.ajax({ url: 'http://127.0.0.1:8000/library/books/list/?search=' + this.search + '&author=' + this.checked + '&ordering=-year&page=1', type: 'GET', success: (response) => { this.max = response.results[0].year this.range = [Math.max(this.min, this.range[0]), Math.min(this.max, this.range[1])] }, error: (response) => { alert('Something went wrong, please, try again') } }) }","title":"\u0424\u0438\u043b\u044c\u0442\u0440 \u0441 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c"}]}